
def packageName = "app-devops-package-cicd.war"
def artifactname = "app-devops-artifact-cicd.jar"
def version = "1.${BUILD_NUMBER}"
def semanticVersion = "1.${BUILD_NUMBER}.0"
def repoName = "pramaraju96/ServiceNow-DevOps-Change-Sample1" // Ensure after forking update the repoName accrodingly.


pipeline {
	agent any
	
	tools {
		maven 'ramaMaven'
	}

	environment {
		//SCANNER_HOME = tool 'sonarScanner'
		VERACODE_APPLICATION_NAME = 'ServiceNow DevOps App#1' //Ensure you update the correct Application name
		VERACODE_SCANNER_NAME = 'Veracode'
        	SONARQUBE_URL = 'https://sonarcloud.io'
	} 

	stages {
		stage('Build') {
			steps {
				sh 'mvn -B -DskipTests clean package'
				echo "Branch name: ${env.BRANCH_NAME}"
			}
		}

		stage('Test') {
			steps {
			  	sh 'mvn test'
				sleep(5);
			}
			post {
				always {
					junit "**/target/surefire-reports/*.xml"
				}
			}
		}

		stage('Register Artifact') {
			steps {
				snDevOpsArtifact(
				artifactsPayload: """
				{
				"artifacts":
				[
				    {
				        "name": "${artifactname}",
				        "version": "${version}",
				        "semanticVersion": "${semanticVersion}",
				        "repositoryName": "${repoName}"
				    }
				],
				"branchName": "main"
				}""", "configurationName" :"DevOps-dcvtrueup500a.service-now.com-1730780602679")
			}     
		}

		
		stage('Sonar Scan') {
			steps {
				sonarSummaries()
			}
		}


		stage('Security Scan - Veracode') {
			steps {
				echo "${env.VERACODE_APPLICATION_NAME}"
				echo "${VERACODE_APPLICATION_NAME}"
				snDevOpsSecurityResult(securityResultAttributes: '{"scanner": "Veracode", "applicationName": "PetStoreAPI-Github"}', "configurationName" :"DevOps-dcvtrueup500a.service-now.com-1730780602679")
			}
		}
/*
		stage('Security Scan - Checkmarx SAST') {
			steps {
				snDevOpsSecurityResult(securityResultAttributes: '{"scanner": "Checkmarx SAST", "projectId": "1094", "securityToolId": "1ce069af47d9061056978bb4236d43df"}')
			}
		}
*/
		stage('Register Package') {
			steps {
				snDevOpsPackage(
				name: "${packageName}",
				artifactsPayload: """
				{
				    "artifacts":
				    [
				        {
				            "name": "${artifactname}",
				            "version": "${version}",
				            "semanticVersion": "${semanticVersion}",
				            "repositoryName": "${repoName}"
				        }
				    ],
				    "branchName": "main"
				}""", "configurationName" :"DevOps-dcvtrueup500a.service-now.com-1730780602679")
			}
		}

		  
		stage('Change') {
			steps {
			    snDevOpsChange(
				changeRequestDetails: '''
			    {
			    "attributes": {
					"type":"normal",
					"chg_model":{"name":"DevOps"},
					"requested_by": {
						"name": "DevOps System"
					}, //requested_by with name.
					//You can provide requested_by with sys_id. Example: "requested_by": "62826bf03710200044e0bfc8bcbe5df1", 
					"assignment_group": {
						"name": "Change Management"
					}, //assignment_group with name.
					//You can provide assignment_group with sys_id. Example: "assignment_group": "5f721d93c0a8010e015533746de18bf9",
					"priority": "2",
					"comments": "This is a sample pipeline script to be added in your change step",
					"work_notes": "Update this to work_notes",
					"start_date": "", //This is the planned start date.
					"end_date": "" // This is the planned end date.
				}
			    }''', "configurationName" :"DevOps-dcvtrueup500a.service-now.com-1730780602679")
			}
		}

		stage('Deploy') {
			steps {
				echo "Deploying the change..."
			}
		}
	}
}

def sonarSummaries() {
/*
	withSonarQubeEnv('sonarcloud.io') {
	    sh """
	    mvn clean verify sonar:sonar \
	    -Dsonar.branch.name=${env.BRANCH_NAME} \
	    -Dsonar.login=aa95cf5eccbb74d54d04b6c027b9b80b3ed4794f \
	    -Dsonar.host.url=https://sonarcloud.io \
	    -Dsonar.organization=pramaraju96 \
	    -Dsonar.projectKey=pramaraju96_ServiceNow-DevOps-Change-Sample1
	    """
	}
*/

/*
    withSonarQubeEnv('sonarcloud.io') {  // Use the SonarQube server configured in Jenkins
	withCredentials([string(credentialsId: 'SONAR_LOGIN', variable: 'SONAR_LOGIN'),
			 string(credentialsId: 'SONAR_PROJECT_KEY', variable: 'SONAR_PROJECT_KEY'),
			 string(credentialsId: 'SONAR_TOKEN', variable: 'SONAR_TOKEN')]) {

	   // Debug output to check the value of BRANCH_NAME
	    echo "Branch Name: $BRANCH_NAME"  // This will print the branch name to the console

	    sh '''#!/bin/bash
		mvn clean verify sonar:sonar \
		-Dsonar.host.url=$SONARQUBE_URL \
		-Dsonar.login=$SONAR_LOGIN \
		-Dsonar.organization=pramaraju96 \
		-Dsonar.projectKey=$SONAR_PROJECT_KEY \
		-Dsonar.branch.name=$BRANCH_NAME
	    '''
	}
    }
*/

	withSonarQubeEnv('sonarcloud.io') {  // Use the SonarQube server configured in Jenkins
		withCredentials([string(credentialsId: 'SONAR_LOGIN', variable: 'SONAR_LOGIN'),
				 string(credentialsId: 'SONAR_PROJECT_KEY', variable: 'SONAR_PROJECT_KEY'),
				 string(credentialsId: 'SONAR_TOKEN', variable: 'SONAR_TOKEN')]) {
		    
	    // Debug the environment variables
	    echo "GIT_BRANCH: ${env.GIT_BRANCH}"  // Print GIT_BRANCH
	    echo "BRANCH_NAME: ${env.BRANCH_NAME}"  // Print BRANCH_NAME

	    // Explicitly set BRANCH_NAME if it's not available
	    def branchName = env.BRANCH_NAME ?: env.GIT_BRANCH ?: 'unknown'
	    
	    // Clean the branch name to remove 'origin/' if it exists
	    def cleanedBranchName = branchName.replaceFirst("^origin/", "") // Strip 'origin/' if it exists

	    echo "Cleaned Branch Name used: $cleanedBranchName"  // Print the cleaned branch name

	    sh '''#!/bin/bash
		mvn clean verify sonar:sonar \
		-Dsonar.host.url=$SONARQUBE_URL \
		-Dsonar.login=$SONAR_LOGIN \
		-Dsonar.organization=pramaraju96 \
		-Dsonar.projectKey=$SONAR_PROJECT_KEY \
		-Dsonar.branch.name=$cleanedBranchName  # Pass cleaned branch name
	    '''
		}
	}
}
