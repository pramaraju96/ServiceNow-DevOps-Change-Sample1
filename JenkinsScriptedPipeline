node {
    def mvnHome = tool 'ramaMaven'


    // Clean checkout stage
    stage('Clean checkout') {
        script {
            // Get the GIT_URL dynamically from the checked-out SCM
            env.GIT_URL = scm.getUserRemoteConfigs()[0].getUrl()
            env.BRANCH_NAME = scm.getBranches()[0].getName()

            echo "GIT_URL: ${env.GIT_URL}"
            echo "BRANCH_NAME: ${env.BRANCH_NAME}"

            // Retrieve all branches
            def branches = scm.getBranches()

            // Print all branch names
            echo "Branches in the repository:"
            branches.each { branch ->
                echo " - ${branch.getName()}"
            }

            checkout([$class: 'GitSCM', 
                      branches: [[name: "${env.BRANCH_NAME}"]],
                      userRemoteConfigs: [[url: "${env.GIT_URL}"]]])
        }
    }

    stage('Initialize') {
        // Perform SCM checkout to ensure environment variables are populated
        checkout scm
        
        // Print environment variables to debug
        echo "Branch Name: ${env.BRANCH_NAME}"
        echo "Git URL: ${env.GIT_URL}"

        script {
            // Default fallback values if the environment variables are not set
            def branchName = env.BRANCH_NAME ?: 'default-branch'
            def gitUrl = env.GIT_URL ?: 'default-url'
            
            def buildNumber = "${BUILD_NUMBER}"
            def version = "1.${buildNumber}"
            def semanticVersion = "1.${buildNumber}.0"
            def repositoryName = gitUrl.replaceFirst(/.*\/([^\/]+)\.git/, '$1')

            env.VERSION = version
            env.SEMANTIC_VERSION = semanticVersion
            env.BRANCH_NAME = branchName
            env.REPO_NAME = repositoryName
        }
    }

    stage('Build') {
        env.PATH = "${mvnHome}/bin:${env.PATH}"
        sh 'mvn -B -DskipTests package'
    }

    stage('Test') {
        sh 'mvn test'
        sleep(5)
        junit '**/target/surefire-reports/*.xml'
    }
/*
    stage('Register Artifact') {
        steps {
            def payload = """
            {
                "artifacts": [
                    {
                        "name": "app-devops-artifact-cicd.jar",
                        "version": "${env.VERSION}",
                        "semanticVersion": "${env.SEMANTIC_VERSION}",
                        "repositoryName": "${env.REPO_NAME}"
                    }
                ],
                "branchName": "${env.BRANCH_NAME}"
            }"""
            snDevOpsArtifact(artifactsPayload: payload)
        }
    }
*/
    stage('SonarCloud Scan') {
        withSonarQubeEnv('sonarcloud.io') {
            sh """
            mvn clean verify sonar:sonar \
            -Dsonar.branch.name=${env.BRANCH_NAME} \
            -Dsonar.login=aa95cf5eccbb74d54d04b6c027b9b80b3ed4794f \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.organization=pramaraju96 \
            -Dsonar.projectKey=pramaraju96_ServiceNow-DevOps-Change-Sample1
            """
        }
    }

    stage('Register Artifact') {

            snDevOpsArtifact(
            artifactsPayload: """
            {
            "artifacts":
            [
                {
                    "name": "app-devops-artifact-cicd.jar",
                    "version": "${env.VERSION}",
                    "semanticVersion": "${env.SEMANTIC_VERSION}",
                    "repositoryName": "${env.REPO_NAME}"
                }
            ],
            "branchName": "${env.BRANCH_NAME}"
            }""")

    }

    stage('Security Scan - Veracode') {
        steps {
            snDevOpsSecurityResult(securityResultAttributes: '{"scanner": "Veracode", "applicationName": "PetStoreAPI-Github"}')
        }
    }
/*
    stage('Security Scan - Checkmarx SAST') {
        steps {
            snDevOpsSecurityResult(securityResultAttributes: '{"scanner": "Checkmarx SAST", "projectId": "1094", "securityToolId": "1ce069af47d9061056978bb4236d43df"}')
        }
    }
*/
    stage('Register Package') {
        steps {
            snDevOpsPackage(
            name: "${packageName}",
            artifactsPayload: """
            {
                "artifacts":
                [
                    {
                        "name": "${artifactname}",
                        "version": "${version}",
                        "semanticVersion": "${semanticVersion}",
                        "repositoryName": "${repoName}"
                    }
                ],
                "branchName": "${env.BRANCH_NAME}"
            }""")
        }
    }

    stage('Change') {
        steps {
            snDevOpsChange(
            changeRequestDetails: '''
            {
            "attributes": {
                "type":"normal",
                "chg_model":{"name":"DevOps"},
                "requested_by": {
                    "name": "DevOps System"
                }, //requested_by with name.
                //You can provide requested_by with sys_id. Example: "requested_by": "62826bf03710200044e0bfc8bcbe5df1", 
                "assignment_group": {
                    "name": "Change Management"
                }, //assignment_group with name.
                //You can provide assignment_group with sys_id. Example: "assignment_group": "5f721d93c0a8010e015533746de18bf9",
                "priority": "2",
                "comments": "This is a sample pipeline script to be added in your change step",
                "work_notes": "Update this to work_notes",
                "start_date": "", //This is the planned start date.
                "end_date": "" // This is the planned end date.
            }
            }''')
            script {
                sh 'exit 1'
            }
        }
    }

    stage('Deploy') {
        steps {
            echo "Deploying the change..."
        }
    }
}
